% \CheckSum{752}
% \iffalse meta-comment
%
%  TUD-Script -- Corporate Design of Technische Universität Dresden
% ----------------------------------------------------------------------------
%
%  Copyright (C) Falk Hanisch <hanisch.latex@outlook.com>, 2012-2017
%
% ----------------------------------------------------------------------------
%
%  This work may be distributed and/or modified under the conditions of the
%  LaTeX Project Public License, version 1.3c of the license. The latest
%  version of this license is in http://www.latex-project.org/lppl.txt and
%  version 1.3c or later is part of all distributions of LaTeX 2005/12/01
%  or later and of this work. This work has the LPPL maintenance status
%  "author-maintained". The current maintainer and author of this work
%  is Falk Hanisch.
%
% ----------------------------------------------------------------------------
%
%  Dieses Werk darf nach den Bedingungen der LaTeX Project Public Lizenz
%  in der Version 1.3c, verteilt und/oder verändert werden. Die aktuelle
%  Version dieser Lizenz ist http://www.latex-project.org/lppl.txt und
%  Version 1.3c oder später ist Teil aller Verteilungen von LaTeX 2005/12/01
%  oder später und dieses Werks. Dieses Werk hat den LPPL-Verwaltungs-Status
%  "author-maintained", wird somit allein durch den Autor verwaltet. Der
%  aktuelle Verwalter und Autor dieses Werkes ist Falk Hanisch.
%
% ----------------------------------------------------------------------------
%
% \fi
%
% \CharacterTable
%  {Upper-case    \A\B\C\D\E\F\G\H\I\J\K\L\M\N\O\P\Q\R\S\T\U\V\W\X\Y\Z
%   Lower-case    \a\b\c\d\e\f\g\h\i\j\k\l\m\n\o\p\q\r\s\t\u\v\w\x\y\z
%   Digits        \0\1\2\3\4\5\6\7\8\9
%   Exclamation   \!     Double quote  \"     Hash (number) \#
%   Dollar        \$     Percent       \%     Ampersand     \&
%   Acute accent  \'     Left paren    \(     Right paren   \)
%   Asterisk      \*     Plus          \+     Comma         \,
%   Minus         \-     Point         \.     Solidus       \/
%   Colon         \:     Semicolon     \;     Less than     \<
%   Equals        \=     Greater than  \>     Question mark \?
%   Commercial at \@     Left bracket  \[     Backslash     \\
%   Right bracket \]     Circumflex    \^     Underscore    \_
%   Grave accent  \`     Left brace    \{     Vertical bar  \|
%   Right brace   \}     Tilde         \~}
%
% \iffalse
%%% From File: tudscr-base.dtx
%<*driver>
\ifx\ProvidesFile\@undefined\def\ProvidesFile#1[#2]{}\fi
\ProvidesFile{tudscr-base.dtx}[%
  2017/05/30 v2.05m TUD-Script\space%
%</driver>
%<package&base>\ProvidesPackage{tudscrbase}[%
%<*driver|package&base>
%!TUD@Version
%<package>  package
  (basics for the bundle)%
]
%</driver|package&base>
%<*driver>
\RequirePackage[ngerman=ngerman-x-latest]{hyphsubst}
\documentclass[english,ngerman,xindy]{tudscrdoc}
\usepackage[T1]{fontenc}
\usepackage{selinput}\SelectInputMappings{adieresis={ä},germandbls={ß}}
\usepackage{babel}
\usepackage{tudscrfonts} % only load this package, if the fonts are installed
\KOMAoptions{parskip=half-}
\usepackage{bookmark}
\usepackage[babel]{microtype}

\CodelineIndex
\RecordChanges
\GetFileInfo{tudscr-base.dtx}
\title{\file{\filename}}
\author{Falk Hanisch\qquad\expandafter\mailto\expandafter{\tudscrmail}}
\date{\fileversion\nobreakspace(\filedate)}

\begin{document}
  \maketitle
  \tableofcontents
  \DocInput{\filename}
\end{document}
%</driver>
% \fi
%
% \selectlanguage{ngerman}
%
% \changes{v2.02}{2014/06/23}{Paket \pkg{titlepage} nicht weiter unterstützt}^^A
%
% \section{Das Paket \pkg{tudscrbase} -- Basisdefinitionen für \TUDScript}
%
% Für die Erstellung der \TUDScript-Klassen werden die dafür benötigten Pakete
% eingebunden und Steuerungsbefehle definiert. Die Klassen sowie einige Pakete
% benötigen das Paket und laden dieses auch.
%
% \ToDo{%
%    Schnittstelle äquivalent zu \cs{KOMA@kav@\dots}? Falls ja, dann Löschen 
%    von Elementen aus \pkg{etoolbox}-Listen mit \cs{list(cs)(g/e/x)}rem oder 
%    ähnlich ermöglichen%
% }[v2.07]
% \ToDo{alle benötigten Pakete zur Not mit Unwind@Package abfangen}[v2.06]
%
%
% \StopEventually{\PrintIndex\PrintChanges\PrintToDos}
%
%    \begin{macrocode}
%<*load>
\RequirePackage{tudscrbase}[\TUD@Version]
%</load>
%    \end{macrocode}
%
% \subsection{Notwendige Pakete für \TUDScript}
%
% \iffalse
%<*package|class&doc>
% \fi
%
% Das Paket \pkg{scrbase} wird zur Optionsdefinition benötigt, \pkg{scrlfile} 
% für verschiedene Hooks vor sowie nach Klassen und Paketen.
% \ToDo{Patches für \pkg{scrbase} raus}[v3.21]
%    \begin{macrocode}
%<*base>
\RequirePackage{scrbase}[2013/12/19]
\@ifpackagelater{scrbase}{2015/10/04}{}{%
  \providecommand*\kernel@ifstar[1]{\kernel@ifnextchar*{\@firstoftwo{#1}}}%
}
\@ifpackagelater{scrbase}{2016/05/11}{}{%
  \renewcommand*\test@@ifdimunt[1]{%
    \@tempswafalse
    \ifstr{#1}{pt}{\@tempswatrue}{%
      \ifstr{#1}{pc}{\@tempswatrue}{%
        \ifstr{#1}{in}{\@tempswatrue}{%
          \ifstr{#1}{bp}{\@tempswatrue}{%
            \ifstr{#1}{cm}{\@tempswatrue}{%
              \ifstr{#1}{mm}{\@tempswatrue}{%
                \ifstr{#1}{dd}{\@tempswatrue}{%
                  \ifstr{#1}{cc}{\@tempswatrue}{%
                    \ifstr{#1}{sp}{\@tempswatrue}{%
                      \ifstr{#1}{ex}{\@tempswatrue}{%
                        \ifstr{#1}{em}{\@tempswatrue}{%
                          \scr@ifpdfoutput{%
                            \ifstr{#1}{px}{\@tempswatrue}{}%
                          }{}%
                        }%
                      }%
                    }%
                  }%
                }%
              }%
            }%
          }%
        }%
      }%
    }%
  }%
}
%</base>
%    \end{macrocode}
% Das Paket \pkg{fix-tudscrfonts} muss bereits vor der Dokumentklasse geladen 
% werden und führt anschließend spezifische Anpassungen an diese aus. Dafür 
% ist das Paket \pkg{scrlfile} notwendig.
%    \begin{macrocode}
%<fontsfix|doc>\RequirePackage{scrlfile}[2013/12/19]
%    \end{macrocode}
% Das Paket \pkg{etoolbox} wird für die Manipulation bereits definierter
% Makros sowie zur erweiterten Auswertung boolescher Ausdrücke benötigt.
%    \begin{macrocode}
%<base|fontsfix|doc>\RequirePackage{etoolbox}[2011/01/03]
%    \end{macrocode}
% Das Paket \pkg{kvsetkeys} erweitert \pkg{keyval} um die Möglichkeit, das
% Verhalten bei der Angabe eines nicht definierten Schlüssels festzulegen.
%    \begin{macrocode}
%<*base>
\RequirePackage{etexcmds}[2011/02/16]
\RequirePackage{kvsetkeys}[2012/04/25]
%</base>
%    \end{macrocode}
%
% \iffalse
%</package|class&doc>
%<*package&base|class&doc>
% \fi
%
% \subsection{Grundlegende Befehle für \TUDScript}
% \subsubsection{Temporäre Makros zur internen Verwendung durch \TUDScript}
%
% Hier werden Makros definiert, die allein für die interne temporäre Nutzung 
% gedacht sind.
% \begin{macro}{\tud@reserved}
% \changes{v2.05}{2015/10/27}{neu}^^A
% Ein Makro zur temporären Verwendung.
%    \begin{macrocode}
\newcommand*\tud@reserved{}
%    \end{macrocode}
% \end{macro}^^A \tud@reserved
% \begin{macro}{\tud@toks@}
% \changes{v2.05}{2015/11/01}{neu}^^A
% \begin{macro}{\eaddto@hook}
% \changes{v2.05}{2015/11/01}{neu}^^A
% Es wird ein token-Regsiter reserviert, welches im weiteren Verlauf an allen
% möglichen Punkten verwendet wird. Mit \cs{eaddto@hook} wird~-- in Ergänzung
% zu \cs{addto@hook}~-- ein Makro zum Anfügen des expandierten Arguments an ein 
% token-Register bereitgestellt.
%    \begin{macrocode}
%<package&base>\newtoks\tud@toks@
\newcommand*\eaddto@hook[2]{%
  \expandafter\addto@hook\expandafter#1\expandafter{#2}%
}
%    \end{macrocode}
% \end{macro}^^A \eaddto@hook
% \end{macro}^^A \tud@toks@
% Die Befehle für die Klasse \cls{tudscrdoc} bereits definierten Befehle 
% werden vor dem Laden von \pkg{tudscrbase} undefiniert gesetzt.
%    \begin{macrocode}
%<*doc>
\BeforePackage{tudscrbase}{%
  \undef\tud@reserved%
  \undef\eaddto@hook%
}
%</doc>
%    \end{macrocode}
%
% \iffalse
%</package&base|class&doc>
%<*package&base>
% \fi
%
%
% \subsubsection{Robuster Test auf leeres Argument}
%
% \begin{macro}{\ifxblank}
% Hiermit kann ein Argument geprüft werden, ob dieses blank ist (leer oder
% Leerzeichen). In seiner Syntax ist er identisch zu \cs{ifblank}, allerdings
% expandiert er im Gegensatz zu diesem das gegebene Argument.
%    \begin{macrocode}
\newcommand*\ifxblank{\ifstr{}}
%    \end{macrocode}
% \end{macro}^^A \ifxblank
%
% \subsubsection{Robuster Test auf numerischen Ausdruck}
%
% \begin{macro}{\ifxnumber}
% Dieser Befehl dient zum Testen, ob ein gegebenes Argument eine Zahl ist.
% Die Syntax lautet: \cs{ifxnumber}\marg{Argument}\marg{Wahr}\marg{Falsch}
% \ToDo{kann eigentlich raus, geht auch mit \cs{expandafter}}[v2.06]
%    \begin{macrocode}
\newcommand*\ifxnumber[1]{%
  \if\relax\detokenize\expandafter{\romannumeral-0#1}\relax%
    \expandafter\@firstoftwo%
  \else%
    \expandafter\@secondoftwo%
  \fi%
}
%    \end{macrocode}
% \end{macro}^^A \ifxnumber
%
% \subsubsection{Test auf booleschen Ausdruck in Form eines Strings}
%
% \begin{macro}{\ifstrbool}
% \changes{v2.03}{2015/01/09}{neu}^^A
% Dieser Befehl dient zum Testen, ob ein gegebener String als boolescher 
% Ausdruck interpretiert werden kann. Ist der String als \enquote{wahr} 
% interpretierbar, wird das zweite Argument ausgeführt. Kann der String als 
% \enquote{falsch} angesehen werden, dementsprechen das dritte. Ist der String 
% kein logischer Wert, kommt das letzte Argument zum Tragen. Die Syntax lautet: 
% \cs{ifstrbool}\marg{Argument}\marg{Wahr}\marg{Falsch}\marg{Andernfalls}
%    \begin{macrocode}
\newcommand*\ifstrbool[4]{%
  \ifstr{#1}{true}{#2}{%
    \ifstr{#1}{on}{#2}{%
      \ifstr{#1}{yes}{#2}{%
        \ifstr{#1}{false}{#3}{%
          \ifstr{#1}{no}{#3}{%
            \ifstr{#1}{off}{#3}{%
              #4%
            }%
          }%
        }%
      }%
    }%
  }%
}
%    \end{macrocode}
% \end{macro}^^A \ifstrbool
%
% \subsubsection{Test auf Angabe einer Länge}
%
% \begin{macro}{\ifxlen}
% \changes{v2.05}{2016/06/16}{neu}^^A
% Hiermit kann getestet werden, ob das gegebene Argument einer Länge entspricht.
%    \begin{macrocode}
\newcommand*\ifxlen[1]{%
  \begingroup%
    \protected@edef\@tempa{#1}%
    \@tempswafalse%
    \expandafter\ifisdimen\expandafter{\@tempa}{\@tempswatrue}{}%
    \expandafter\ifisskip\expandafter{\@tempa}{\@tempswatrue}{}%
    \expandafter\ifisdimexpr\expandafter{\@tempa}{\@tempswatrue}{}%
    \if@tempswa\edef\@tempa{\the\@tempa}\fi%
    \expandafter\ifdimen\expandafter{\@tempa}{%
      \aftergroup\@firstoftwo%
    }{%
      \aftergroup\@secondoftwo%
    }%
  \endgroup
}
%    \end{macrocode}
% \end{macro}^^A \iflanguageloaded
%
% \subsubsection{Test auf eine verwendbare Sprache}
%
% \begin{macro}{\iflanguageloaded}
% \changes{v2.05}{2015/11/23}{neu}^^A
% Hiermit kann getestet werden, ob das Argument als Sprache nutzbar ist.
%    \begin{macrocode}
\newcommand*\iflanguageloaded[1]{%
  \PackageWarning{tudscrbase}{%
    Whether package `babel' nor package `polyglossia' has been loaded%
  }%
  \expandafter\@secondoftwo%
}
\AfterPackage*{babel}{%
  \renewcommand*\iflanguageloaded[1]{%
    \@expandtwoargs\in@{,#1,}{,\bbl@loaded,}%
    \ifin@%
      \expandafter\@firstoftwo%
    \else%
      \expandafter\@secondoftwo%
    \fi%
  }%
}
\AfterPackage*{polyglossia}{%
  \renewcommand*\iflanguageloaded[1]{\ifcsdef{#1@loaded}}%
}
%    \end{macrocode}
% \end{macro}^^A \iflanguageloaded
%
% \subsubsection{Expansion geschützter Makros}
%
% Im \LaTeX-Kernel wird der Befehl \cs{@expandtwoargs} definiert, welcher zwei 
% Argumente in ein angegebenes Makro vollständig expandiert. Dabei erfolgt die 
% Expansion der beiden Argumente aufgrund der standardmäßigen Verwendung von 
% \cs{edef} allerdings vollständig und ohne die Beachtung von \cs{protect}.
% \begin{macro}{\protected@expandtwoargs}
% \changes{v2.02}{2014/11/13}{neu}^^A
% Der Befehl \cs{protected@expandtwoargs} kann äquivalent genutzt werden, 
% lässt dabei aber mit \cs{protect} geschützte Makros unberührt.
%    \begin{macrocode}
\providecommand*\protected@expandtwoargs[3]{%
  \protected@edef\reserved@a{\noexpand#1{#2}{#3}}\reserved@a%
}
%    \end{macrocode}
% \end{macro}^^A \protected@expandtwoargs
%
% \subsubsection{Division für rationale Zahlen}
%
% Mit \LaTeXe kann~-- ohne die Verwendung zusätzlicher Pakete~-- nicht ohne 
% Weiteres eine Division durchgeführt werden, die als Ergenis eine rationale 
% Zahl liefert. Dem wird hier Abhilfe geleistet.
% \begin{macro}{\tud@divide}
% \changes{v2.04}{2015/04/09}{neu}^^A
% Der Befehl erwartet im ersten Argument das Makro, in welches das Ergebnis 
% der Division expandiert werden soll, danach folgen Dividend und Divisor. Die 
% Berechnung erfolgt in einer Gruppe, damit die benötigten Längenregister nach 
% dieser erhalten bleiben.
%    \begin{macrocode}
\newcommand*\tud@divide[3]{%
  \begingroup%
%    \end{macrocode}
% Die Division wird über temporäre Längenregister durchgeführt. Die zu 
% teilenden Zahlen werden normiert, wodurch auch Längen mit unterschiedlichen 
% Einheiten geteilt werden können.
%    \begin{macrocode}
    \@defaultunits\@tempdima #2pt\relax\@nnil%
    \@defaultunits\@tempdimb #3pt\relax\@nnil%
%    \end{macrocode}
% Danach wird mit der größeren der beiden Zahlen der größtmögliche, durch
% \val{2} teilbare Faktor zur Berechnung ermittelt.
%    \begin{macrocode}
    \ifdim\@tempdima>\@tempdimb\relax%
      \@whiledim\@tempdimb>1pt\relax\do{%
        \setlength\@tempdima{.1\@tempdima}%
        \setlength\@tempdimb{.1\@tempdimb}%
      }%
      \setlength\@tempdimc{\@tempdima}%
    \else%
      \@whiledim\@tempdima>1pt\relax\do{%
        \setlength\@tempdima{.1\@tempdima}%
        \setlength\@tempdimb{.1\@tempdimb}%
      }%
      \setlength\@tempdimc{\@tempdimb}%
    \fi%
    \@tempcnta=1\relax%
    \@whiledim\dimexpr\@tempcnta\@tempdimc\relax<.01\maxdimen\do{%
      \multiply\@tempcnta by 10\relax%
    }%
%    \end{macrocode}
% Mit dem im temporären Zählerregister \cs{@tempcnta} gespeicherten Faktor 
% wird der Dividend erweitert und der berechnete Quotient wieder gekürzt.
%    \begin{macrocode}
    \setlength{\@tempdimc}{%
      \dimexpr(\@tempcnta\@tempdima / \@tempdimb * \p@)\relax%
    }%
    \setlength{\@tempdimc}{\dimexpr \@tempdimc/\@tempcnta\relax}%
%    \end{macrocode}
% Das Ergebnis wird in das angegebene Makro expandiert.
%    \begin{macrocode}
    \edef\@tempa{\endgroup\def\noexpand#1{\strip@pt\@tempdimc}}%
  \@tempa%
}
%    \end{macrocode}
% \end{macro}^^A \tud@divide
%
% \subsubsection{Erzwungene Kleinschreibung von Strings}
%
% Um angegebene Werte bei Schlüssel-Wert-Paaren oder Schlüsselwörter in
% bestimmten Feldern mit Sicherheit erkennen zu können, werden diese zwingend 
% in Kleinbuchstaben geschieben.
% \begin{macro}{\tud@lowerstring}
% Das Makro wird mit \cs{tud@lowerstring}\marg{Zielmakro}\marg{String} benutzt.
%    \begin{macrocode}
\newcommand*\tud@lowerstring[2]{%
  \protected@edef#1{#2}%
  \lowercase\expandafter{%
    \expandafter\def\expandafter #1\expandafter{#1}%
  }%
}
%    \end{macrocode}
% \end{macro}^^A \tud@lowerstring
%
% \subsubsection{Erweiterung von \KOMAScript-Schriftelementen}
%
% \begin{macro}{\tud@font@koma@set}
% \begin{macro}{\tud@font@koma@unset}
% \begin{macro}{\tud@font@koma@reset}
% \changes{v2.02}{2014/08/24}{neu}^^A
% Es wird die Möglichkeit geschaffen, bestimmten Schriftelementen weitere
% Eigenschaften mitzugeben. Damit dies optionsabhängig geschehen kann und
% \cs{addtokomafont} nur einmalig verwendete werden muss, wird im Zweifelsfall
% einem Schriftelement ein Hilfsmakro \cs{tud@font@koma@\meta{Element}} 
% zugewiesen, welches intern angepasst werden kann. Mit \cs{tud@font@koma@set} 
% werden dem angegebenen Element die gewünschten Schriftattribute zugeteilt.
%    \begin{macrocode}
\newcommand*\tud@font@koma@set[2]{%
  \ifcsdef{tud@font@koma@#1}{}{\addtokomafont{#1}{\csuse{tud@font@koma@#1}}}%
  \csdef{tud@font@koma@#1}{#2\nobreak}%
}
%    \end{macrocode}
% Mit \cs{tud@font@koma@unset} kann das angegebene Element wieder zurückgesetzt
% werden. Dabei wird das hinzugefügte Makro auf \cs{relax} gesetzt.
%    \begin{macrocode}
\newcommand*\tud@font@koma@unset[1]{%
  \ifcsdef{tud@font@koma@#1}{}{\addtokomafont{#1}{\csuse{tud@font@koma@#1}}}%
  \csdef{tud@font@koma@#1}{\relax}%
}
%    \end{macrocode}
% Werden \KOMAScript-Schriftelemente auf ihre Ausgangsdefinition zurückgesetzt, 
% so kann diesen mit \cs{tud@font@koma@reset} kann das passende Hilfsmakro
% abermals zugewiesen werden.
%    \begin{macrocode}
\newcommand*\tud@font@koma@reset[1]{%
  \ifcsdef{tud@font@koma@#1}{\addtokomafont{#1}{\csuse{tud@font@koma@#1}}}{}%
}
%    \end{macrocode}
% \end{macro}^^A \tud@font@koma@unset
% \end{macro}^^A \tud@font@koma@reset
% \end{macro}^^A \tud@font@koma@set
%
% \subsubsection{Optionsdefinition für \TUDScript}
%
% In Anlehnung an \KOMAScript{} werden hier Befehle zur Definition und
% Ausführung unterschiedlicher Klassenoptionen mithilfe der Funktionen aus
% dem \pkg{scrbase}-Paket erstellt. 
%
% \begin{macro}{\TUDProcessOptions}
% \begin{macro}{\TUDExecuteOptions}
% \begin{macro}{\TUDoptions}
% \begin{macro}{\TUDoption}
% Zuerst ein paar Makros zur einfacheren Verwendung.
%    \begin{macrocode}
\DefineFamily{TUD}
\newcommand*\TUDProcessOptions{\FamilyProcessOptions{TUD}}
\newcommand*\TUDExecuteOptions{\FamilyExecuteOptions{TUD}}
\newcommand*\TUDoptions{\FamilyOptions{TUD}}
\newcommand*\TUDoption{\FamilyOption{TUD}}
%    \end{macrocode}
% \end{macro}^^A \TUDoption
% \end{macro}^^A \TUDoptions
% \end{macro}^^A \TUDExecuteOptions
% \end{macro}^^A \TUDProcessOptions
% \begin{macro}{\TUD@key}
% \begin{macro}{\TUD@ifkey}
% \begin{macro}{\TUD@set@ifkey}
% \begin{macro}{\TUD@numkey}
% \begin{macro}{\TUD@bool@numkey}
% \changes{v2.03}{2015/01/09}{neu}^^A
% \begin{macro}{\TUD@set@numkey}
% \changes{v2.02}{2014/11/05}{neu}^^A
% \begin{macro}{\TUD@lengthkey}
% \changes{v2.03}{2015/01/09}{neu}^^A
% \begin{macro}{\TUD@set@lengthkey}
% \begin{macro}{\TUD@set@dimenkey}
% \changes{v2.05}{2016/06/15}{neu}^^A
% \begin{macro}{\TUD@unknown@keyval}
% Dies sind die Befehle zur Definition der Optionen. Klassenoptionen können
% entweder als Schalter (\cs{TUD@ifkey}) oder aber mit mehreren möglichen
% Werten (\cs{TUD@numkey}) definiert werden. Prinzipiell ist auch eine freie
% Definition mit anschließender Abarbeitung ohne die zuvor genannten Befehle
% möglich.
%    \begin{macrocode}
\newcommand*\TUD@key[1][.\@currname.\@currext]{%
  \DefineFamilyMember[{#1}]{TUD}%
  \DefineFamilyKey[{#1}]{TUD}%
}
%    \end{macrocode}
% Dies sind die Befehle zur Definition einer booleschen Option.
%    \begin{macrocode}
\newcommand*\TUD@ifkey[1][.\@currname.\@currext]{%
  \DefineFamilyMember{TUD}%
  \FamilyBoolKey[#1]{TUD}%
}
\newcommand*\TUD@set@ifkey{\FamilySetBool{TUD}}
%    \end{macrocode}
% Dies sind die Befehle zur Definition einer Option mit definierten Werten.
%    \begin{macrocode}
\newcommand*\TUD@numkey[1][.\@currname.\@currext]{%
  \DefineFamilyMember{TUD}%
  \FamilyNumericalKey[#1]{TUD}%
}
%    \end{macrocode}
% Um Dopplungen im Code zu vermeiden, werden für die numerische Schlüssel die 
% booleschen Standardwertzuweisungen in einem Makro gespeichert.
%    \begin{macrocode}
\newcommand*\TUD@bool@numkey{%
  {false}{0},{off}{0},{no}{0},{true}{1},{on}{1},{yes}{1}%
}
\newcommand*\TUD@set@numkey{\FamilySetNumerical{TUD}}
%    \end{macrocode}
% Dies sind die Befehle zur Definition einer Option zur Festlegung einer Länge.
%    \begin{macrocode}
\newcommand*\TUD@lengthkey[1][.\@currname.\@currext]{%
  \DefineFamilyMember{TUD}%
  \FamilyLengthKey[#1]{TUD}%
}
\newcommand*\TUD@set@lengthkey{\FamilySetLength{TUD}}
%    \end{macrocode}
% Mit \cs{TUD@set@dimenkey} wird der übergebene Längenwert im spezifiezierten 
% Makro gespeichert.
%    \begin{macrocode}
\newcommand*\TUD@set@dimenkey[3]{%
  \ifxlen{#3}{%
    \def#2{#3}%
    \FamilyKeyStateProcessed%
  }{%
    \TUD@unknown@keyval{#1}{#3}{dimens}%
  }%
}
%    \end{macrocode}
% Dieser Befehl wird lediglich pro forma definiert. An diesen kann eine Liste 
% möglicher Wertzuweisungen übergeben werden, welche durch \KOMAScript derzeit 
% jedoch nicht abgearbeitet und ausgegeben wird.
%    \begin{macrocode}
\newcommand*\TUD@unknown@keyval{\FamilyUnknownKeyValue{TUD}}
%    \end{macrocode}
% \end{macro}^^A \TUD@unknown@keyval
% \end{macro}^^A \TUD@set@dimenkey
% \end{macro}^^A \TUD@set@lengthkey
% \end{macro}^^A \TUD@lengthkey
% \end{macro}^^A \TUD@set@numkey
% \end{macro}^^A \TUD@bool@numkey
% \end{macro}^^A \TUD@numkey
% \end{macro}^^A \TUD@set@ifkey
% \end{macro}^^A \TUD@ifkey
% \end{macro}^^A \TUD@key
% \begin{macro}{\TUD@key@lock}
% \begin{macro}{\TUD@std@ifkey@lock}
% \begin{macro}{\TUD@std@numkey@lock}
% \begin{macro}{\TUD@set@ifkey@lock}
% \begin{macro}{\TUD@set@numkey@lock}
% Da sich die Klassenoptionen teilweise selbst gegenseitig beeinflussen oder
% aber in bestimmten Fällen eine Option in Abhängigkeit von einer anderen
% unterschiedliche Standardwerte annehmen soll, wird dafür eine Möglichkeit
% geschaffen. Dabei kann der Nutzer jederzeit einen von einer Option abhängigen
% Standardwert einer Klassenoption überschreiben. Die Klassenoptionen selber
% werden intern mit dem Befehl \cs{TUD@key@lock} definiert und die Standardwerte
% sowie deren Manipulation innerhalb der Optionen mit \cs{TUD@std@ifkey@lock}
% bzw. \cs{TUD@std@numkey@lock} gesetzt. Mit \cs{TUD@set@ifkey@lock} und
% \cs{TUD@set@numkey@lock} werden bei der expliziten Anwendung einer Option
% durch den Nutzer die entsprechenden Werte geändert und gegen ein internes
% Überschreiben gesperrt.
%    \begin{macrocode}
\newcommand*\TUD@key@lock[2][.\@currname.\@currext]{%
%    \end{macrocode}
% Basierend auf dem Namen des Schalters wird die notwendige, boolesche Variable
% erzeugt (\cs{if@tud@\meta{Schaltername}@lock}), welche im Falle des direkten
% Aufrufs des Schlüssels durch den Anwender, ein internes Überschreiben
% verhindert.
%    \begin{macrocode}
  \newbool{@tud@#2@locked}%
  \TUD@key[{#1}]{#2}%
}
%    \end{macrocode}
% Es kann intern über \cs{if\meta{Schaltername}@lock} geprüft werden, ob einem
% mit Schlüssel, der mit \cs{TUD@key@lock} definiert wurde, durch den Anwender
% ein explizites Verhalten zugewiesen wurde. Sollte dies nicht der Fall sein,
% kann dieser hiermit intern beliebig angepasst werden. Da es durch das Setzen
% der Option mit \cs{TUDoption} zu einer Sperrung kommt, muss diese folgend
% wieder rückgängig gemacht werden.
%    \begin{macrocode}
\newcommand*\TUD@std@ifkey@lock[3]{%
  \ifbool{@tud@#1@locked}{}{%
    \TUD@set@ifkey{#1}{#2}{#3}%
    \boolfalse{@tud@#1@locked}%
  }%
}
\newcommand*\TUD@set@ifkey@lock[1]{%
  \booltrue{@tud@#1@locked}%
  \TUD@set@ifkey{#1}%
}
\let\TUD@std@numkey@lock\TUD@std@ifkey@lock
\newcommand*\TUD@set@numkey@lock[1]{%
  \booltrue{@tud@#1@locked}%
  \TUD@set@numkey{#1}%
}
%    \end{macrocode}
% \end{macro}^^A \TUD@set@numkey@lock
% \end{macro}^^A \TUD@set@ifkey@lock
% \end{macro}^^A \TUD@std@numkey@lock
% \end{macro}^^A \TUD@std@ifkey@lock
% \end{macro}^^A \TUD@key@lock
% \begin{macro}{\cs@lock}
% \begin{macro}{\cs@std@lock}
% \begin{macro}{\cs@set@lock}
% Mit \cs{cs@lock}\marg{Name}\marg{Definition} kann ein Befehl definiert
% werden, welcher intern nur mit \cs{cs@std@lock}\marg{Name}\marg{Definition}
% geschrieben wird, wenn nicht über eine entsprechende Option ein explizites
% Verhalten mit \cs{cs@set@lock}\marg{Name}\marg{Definition} zugewiesen wurde.
% Dies ist äquivalent zu \cs{TUD@std@ifkey@lock} und \cs{TUD@set@ifkey@lock}
% bzw. \cs{TUD@std@numkey@lock} und \cs{TUD@set@numkey@lock}
%    \begin{macrocode}
\newcommand*\cs@lock[2]{%
  \expandafter\newcommand\expandafter*\csname#1\endcsname{#2}%
  \newbool{#1@locked}%
}
\newcommand*\cs@std@lock[2]{%
  \ifbool{#1@locked}{}{%
    \csdef{#1}{#2}%
    \boolfalse{#1@locked}%
  }%
}
\newcommand*\cs@set@lock[2]{%
  \csdef{#1}{#2}%
  \booltrue{#1@locked}%
}
%    \end{macrocode}
% \end{macro}^^A \cs@set@lock
% \end{macro}^^A \cs@std@lock
% \end{macro}^^A \cs@lock
% \begin{macro}{\tud@setbool}
% \changes{v2.05}{2015/07/03}{neu}^^A
% \begin{macro}{\bool@lock}
% \begin{macro}{\bool@std@lock}
% \begin{macro}{\bool@set@lock}
% Diese Makros dienen in Anlehnung an die vorherigen zum Definieren und Setzen
% von sperrbaren booleschen Schaltern. Dabei wird \cs{tud@setbool} definiert, 
% um nicht nur \val{true} und \val{false} sondern auch alle anderen bekannten 
% booleschen Zuweisungen (\val{yes} und \val{on} sowie \val{no} und \val{off})
% mit diesen Befehlen verwenden zu können.
%    \begin{macrocode}
\newcommand*\tud@setbool[2]{%
  \ifstrbool{#2}{\booltrue{#1}}{\boolfalse{#1}}{%
    \PackageError{tudscrbase}{%
      `#2' is not a valid boolean expression%
    }{%
      You tried to set the boolean switch `\@backslashchar if#1'\MessageBreak%
      to value `#2' but only `true' `on' and `yes' as well as \MessageBreak%
      `false' `no' and `off' are valid values.%
    }%
  }%
}
\newcommand*\bool@lock[2][false]{%
  \newbool{#2}%
  \newbool{#2@locked}%
  \tud@setbool{#2}{#1}%
}
\newcommand*\bool@std@lock[2]{%
  \ifbool{#1@locked}{}{%
    \tud@setbool{#1}{#2}%
    \boolfalse{#1@locked}%
  }%
}
\newcommand*\bool@set@lock[2]{%
  \tud@setbool{#1}{#2}%
  \booltrue{#1@locked}%
}
%    \end{macrocode}
% \end{macro}^^A \bool@set@lock
% \end{macro}^^A \bool@std@lock
% \end{macro}^^A \bool@lock
% \end{macro}^^A \tud@setbool
%
% \iffalse
%</package&base>
%<*package&(base|fontsfix)>
% \fi
%
% \begin{macro}{\tud@cmd@store}
% \begin{macro}{\tud@cmd@restore}
% \begin{macro}{\tud@cmd@reset}
% \begin{macro}{\tud@cmd@update}
% \changes{v2.04}{2015/03/03}{neu}^^A
% \begin{macro}{\tud@cmd@use}
% \begin{macro}{\tud@cmd@check}
% \changes{v2.03}{2015/01/09}{neu}^^A
% Mit diesen Befehlen wird es möglich, Originalbefehle sichern, nutzen und
% wiederherstellen zu können. Dies wird benötigt, um zwischen den einzelnen
% Layouts über Optionseinstellungen zu wechseln und dabei von einem definierten
% Anfangszustand auszugehen.
%
% Mit dem Aufruf \cs{tud@cmd@store}\marg{Befehlsname} wird der im Argument 
% angegebene Befehl in einem neuem Makro \cs{@@tud@\meta{Befehlsname}}
% gespeichert. Dieser kann danach beliebig angepasst werden. Soll der Befehl zu
% einem späteren Zeitpunkt auf den Orginalzustand zurücksetzen, kann hierfür
% jederzeit der Befehl \cs{tud@cmd@reset}\marg{Befehlsname} verwendet werden.
% Durch das Makro \cs{tud@cmd@restore}\marg{Befehlsname} wird das mit
% \cs{tud@cmd@store} erstellte Hilfsmakro zusätzlich noch  gelöscht. Der
% ursprüngliche Befehl kann als solcher mit \cs{tud@cmd@use}\marg{Befehlsname}
% weiterhin genutzt werden. Ein zuvor bereits gesicherter Befehl kann mit dem
% Makro \cs{tud@cmd@update}\marg{Befehlsname} auf die momentane Definition 
% aktualisiert werden.
%    \begin{macrocode}
\newcommand*\tud@cmd@store[1]{%
  \tud@cmd@check{#1}%
  \ifcsdef{@@tud@#1}{}{\csletcs{@@tud@#1}{#1}}%
}
%<*base>
\newcommand*\tud@cmd@restore[1]{%
  \tud@cmd@check{#1}%
  \ifcsdef{@@tud@#1}{%
    \csletcs{#1}{@@tud@#1}%
    \csundef{@@tud@#1}%
  }{}%
}
\newcommand*\tud@cmd@reset[1]{%
  \tud@cmd@check{#1}%
  \ifcsdef{@@tud@#1}{\csletcs{#1}{@@tud@#1}}{}%
}
\newcommand*\tud@cmd@update[1]{%
  \tud@cmd@check{#1}%
  \ifcsdef{@@tud@#1}{\csletcs{@@tud@#1}{#1}}{}%
}
\newcommand*\tud@cmd@use[1]{%
  \tud@cmd@check{#1}%
  \ifcsdef{@@tud@#1}{%
    \csuse{@@tud@#1}%
  }{%
    \csuse{#1}%
  }%
}
%</base>
%    \end{macrocode}
% Dieses Makro dient zum Überprüfen, ob der zu sichernde beziehungsweise 
% wiederherzustellende Befehl überhaupt definiert ist. Sollte das nicht der 
% Fall sein, wird ein Fehler ausgegeben.
%    \begin{macrocode}
\newcommand*\tud@cmd@check[1]{%
  \ifcsdef{#1}{}{%
    \PackageError{%
%<base>      tudscrbase%
%<fontsfix>      fix-tudscrfonts%
    }{`\@backslashchar#1' is not defined}{%
      The command `\@backslashchar#1' was never defined\MessageBreak%
      Please contact the TUD-Script maintainer\MessageBreak%
      via \tudscrmail. A bugfix is urgently required.%
    }%
  }%
}
%    \end{macrocode}
% Die Befehle \cs{tud@cmd@store} und \cs{tud@cmd@check} werden für das Paket 
% \pkg{fix-tudscrfonts} bereits außerhalb von \pkg{tudscrbase} definiert. Damit 
% deshalb keine Probleme entstehen, werden diese kurzerhand vor dem Laden von
% \pkg{tudscrbase} undefiniert gesetzt.
%    \begin{macrocode}
%<*fontsfix>
\BeforePackage{tudscrbase}{%
  \undef\tud@cmd@store%
  \undef\tud@cmd@check%
}
%</fontsfix>
%    \end{macrocode}
% \end{macro}^^A \tud@cmd@check
% \end{macro}^^A \tud@cmd@use
% \end{macro}^^A \tud@cmd@update
% \end{macro}^^A \tud@cmd@reset
% \end{macro}^^A \tud@cmd@restore
% \end{macro}^^A \tud@cmd@store
%
% \iffalse
%</package&(base|fontsfix)>
%<*package&base>
% \fi
%
% \begin{macro}{\tud@skip@store}
% \changes{v2.04}{2015/03/02}{neu}^^A
% \changes{v2.05}{2016/07/13}{Verwendung von \cs{tud@skip@check}}^^A
% \begin{macro}{\tud@skip@restore}
% \changes{v2.04}{2015/03/02}{neu}^^A
% \changes{v2.05}{2016/07/13}{Verwendung von \cs{tud@skip@check}}^^A
% \begin{macro}{\tud@skip@reset}
% \changes{v2.05}{2016/07/13}{neu}^^A
% \begin{macro}{\tud@skip@set}
% \changes{v2.04}{2015/05/05}{neu}^^A
% \changes{v2.05}{2016/07/13}{Verwendung von \cs{tud@skip@check}}^^A
% \begin{macro}{\tud@skip@check}
% \changes{v2.05}{2016/07/13}{neu}^^A
% Hiermit können~-- äquivalent zum Sichern und Wiederherstellen von Befehlen~-- 
% Längenregister abgespeichert werden.
%    \begin{macrocode}
\newcommand*\tud@skip@store[1]{%
  \tud@skip@check{#1}{%
    \ifcsdef{@@tud@skip@#1}{}{%
      \csedef{@@tud@skip@#1}{\expandafter\the\csname #1\endcsname}%
    }%
  }%
}
\newcommand*\tud@skip@restore[1]{%
  \tud@skip@check{#1}{%
    \ifcsdef{@@tud@skip@#1}{%
      \csname #1\endcsname=\csname @@tud@skip@#1\endcsname%
      \csundef{@@tud@skip@#1}%
    }{}%
  }%
}
\newcommand*\tud@skip@reset[1]{%
  \tud@skip@check{#1}{%
    \ifcsdef{@@tud@skip@#1}{%
      \csname#1\endcsname=\csname @@tud@skip@#1\endcsname%
    }{}%
  }%
}
\newcommand*\tud@skip@set[2]{%
  \tud@skip@check{#1}{%
    \expandafter\setlength\csname #1\endcsname{#2}%
  }%
}
\newcommand*\tud@skip@check[1]{%
  \begingroup%
    \@tempswafalse%
    \expandafter\ifisskip\expandafter{\csname#1\endcsname}{\@tempswatrue}{}%
    \expandafter\ifisdimen\expandafter{\csname#1\endcsname}{\@tempswatrue}{}%
    \if@tempswa%
      \aftergroup\@firstofone%
    \else%
      \aftergroup\@gobble%
    \fi%
  \endgroup%
}
%    \end{macrocode}
% \end{macro}^^A \tud@skip@check
% \end{macro}^^A \tud@skip@set
% \end{macro}^^A \tud@skip@reset
% \end{macro}^^A \tud@skip@restore
% \end{macro}^^A \tud@skip@store
% \begin{macro}{\tud@patch@wrn}
% Dieses Makro wird verwendet, wenn mit den Mitteln von \pkg{etoolbox} bereits
% vorhandene Befehle angepasst werden sollen (\cs{apptocmd}, \cs{pretocmd},
% \cs{patchcmd}) und dies nicht gelingt.
%    \begin{macrocode}
\newcommand*\tud@patch@wrn[1]{%
  \PackageWarning{tudscrbase}{%
    It wasn't possible to patch `\@backslashchar#1'\MessageBreak%
    Please contact the TUD-Script maintainer\MessageBreak%
    via \tudscrmail. Without a bugfix an\MessageBreak%
    erroneous output may occur%
  }%
}
%    \end{macrocode}
% \end{macro}^^A \tud@patch@wrn
% \begin{macro}{\TUD@parameter@family}
% \begin{macro}{\TUD@parameter@@family}
% \begin{macro}{\TUD@parameter@checkfamily}
% Mit \cs{TUD@parameter@family}\marg{Familienname}\marg{Definitionen} können
% Schlüssel"=Wert"=Parameter für die optionalen Argumente von Befehle definiert
% werden. Das erste Argument definiert den Familiennamen für den jeweiligen 
% Befehl, welcher eindeutig gewählt werden sollte. Dieser wird im Hilfsmakro
% \cs{TUD@parameter@@family} gesichert. Dies soll im Zusammenspiel mit dem 
% Makro \cs{TUD@parameter@checkfamily} dafür sorgen, dass die im Folgenden
% bereitgestellten Befehle \cs{TUD@parameter@def}, \cs{TUD@parameter@let} und
% \cs{TUD@parameter@handler@macro}~-- welche die eigentliche Definition der
% Parameter für den Benutzer bewerkstelligen~-- ohne die Angabe der Familie 
% nur innerhalb des zweiten Argumentes von \cs{TUD@parameter@family} verwendet
% werden können.
%    \begin{macrocode}
\newcommand*\TUD@parameter@@family{}
\newcommand*\TUD@parameter@family[2]{%
  \xdef\TUD@parameter@@family{#1}%
  #2%
  \gdef\TUD@parameter@@family{}%
}
%    \end{macrocode}
% Dieser Befehl prüft, ob eine Familie für den Paramter definiert wurde.
%    \begin{macrocode}
\newcommand*\TUD@parameter@checkfamily[2]{%
  \ifxblank{#1}{%
    \PackageError{tudscrbase}{%
      No family for \@backslashchar#2 defined%
    }{%
      You have to use \@backslashchar#2\space within the\MessageBreak%
      second argument of \string\TUD@parameter@family. The first\MessageBreak%
      argument of \string\TUD@parameter@family\space has to be\MessageBreak%
      a unique family name. Alternatively, you can specify\MessageBreak%
      the family name within the optional argument of\MessageBreak%
      \@backslashchar#2.
    }%
  }{}%
}
%    \end{macrocode}
% \end{macro}^^A \TUD@parameter@checkfamily
% \end{macro}^^A \TUD@parameter@@family
% \end{macro}^^A \TUD@parameter@family
% \begin{macro}{\TUD@parameter@def}
% \begin{macro}{\TUD@parameter@let}
% \changes{v2.02}{2014/07/25}{Beachtung der gegebenen Standardwerte}^^A
% \cs{TUD@parameter@def}\marg{Name}\oarg{Säumniswert}\marg{Verarbeitung} nutzt
% \cs{define@key} aus dem \pkg{keyval}-Paket, um einen Schlüssel und dessen
% Verarbeitung zu definieren, wobei auf den zugewiesenen Wert innerhalb des
% zweiten obligatorischen Argumentes mit |#1| zugegriffen werden kann.
%    \begin{macrocode}
\newcommand*\TUD@parameter@def[1][\TUD@parameter@@family]{%
  \TUD@parameter@checkfamily{#1}{TUD@parameter@def}%
  \expandafter\define@key\expandafter{#1}%
}
%    \end{macrocode}
% Mit \cs{TUD@parameter@let}\marg{Name}\marg{Name} kann äquivalent zur
% \mbox{\TeX-Primitive \cs{let}} die Definition der Verarbeitung eines
% Parameters auf einen weiteren übertragen werden.
%    \begin{macrocode}
\newcommand*\TUD@parameter@let[3][\TUD@parameter@@family]{%
  \TUD@parameter@checkfamily{#1}{TUD@parameter@let}%
  \@expandtwoargs{\csletcs}{KV@#1@#2}{KV@#1@#3}%
  \@expandtwoargs{\csletcs}{KV@#1@#2@default}{KV@#1@#3@default}%
}
%    \end{macrocode}
% \end{macro}^^A \TUD@parameter@let
% \end{macro}^^A \TUD@parameter@def
% \begin{macro}{\TUD@parameter@set}
% \changes{v2.05}{2016/05/26}{robustere Verarbeitung von Default-Argumenten}^^A
% \begin{macro}{\TUD@parameter@nokey}
% \changes{v2.05}{2016/05/26}{neu}^^A
% Mit \cs{TUD@parameter@set}\marg{Familienname}\marg{Parameterliste} wird die
% Verarbeitung aller gegebenen Parameter veranlasst. Normalerweise wird dieser
% Befehl \emph{nicht} innerhalb des Argumentes von \cs{TUD@parameter@family}
% verwendet. In jedem Fall muss die zu verwendende Familie angegeben werden.
%    \begin{macrocode}
\newcommand*\TUD@parameter@nokey{@nokey@}
\newcommand*\TUD@parameter@set[2]{%
  \IfArgIsEmpty{#2}{}{%
%    \end{macrocode}
% Hierfür wird die angegebene Parameterliste sukzessive abgearbeitet. Elemente, 
% welche in Schlüssel"=Wert"=Syntax angegeben wurden, bleiben unverändert\dots
%    \begin{macrocode}
    \def\@tempb{}%
    \def\@tempa##1{%
      \@expandtwoargs\in@{=}{##1}%
      \ifin@%
        \appto\@tempb{##1,}%
      \else%
%    \end{macrocode}
% \dots ebenso wie Schlüssel ohne Wert, falls diese definiert wurden. Zu 
% beachten ist, dass es mit \cs{TUD@parameter@handler@value} respektive
% \cs{TUD@parameter@handler@default} auch möglich ist, für einen mit einem der 
% beiden Makros gewählten Schlüssel, lediglich den passenden Wert anzugeben.
% Dies wird genutzt, um optionale Argumente direkt für den Hauptparameter eines
% Makros oder einer Umgebung~-- wie beispielsweise für eine Überschrift~--
% nutzen zu können, aber zusätzlich die Möglichkeit zu bieten, auch eine
% Parameterliste zu verwenden. Hierfür werden Umlaute sowie das \enquote*{ß}
% unschädlich gemacht.
%    \begin{macrocode}
        \begingroup
          \let\IeC\@firstofone%
          \def\"####1{####1e}%
          \def\ss{ss}%
          \def\SS{SS}%
          \protected@edef\tud@reserved{%
            \endgroup%
            \noexpand\protected@edef\noexpand\@tempc{KV@#1@##1}%
          }%
        \tud@reserved%
        \ifcsdef{\@tempc}{%
          \appto\@tempb{##1,}%
        }{%
          \protected@eappto\@tempb{\TUD@parameter@nokey=##1,}%
        }%
      \fi%
    }%
    \forcsvlist\@tempa{#2}%
    \@expandtwoargs\kvsetkeys{#1}{\@tempb}%
  }%
}
% Ursprünglich entwickelte sich dieser Ansatz aus der Situation, dass das Makro 
% \cs{maketitle} in seiner Standarddefinition ein optionales Argument für eine
% Seitenzahl bereithält, bei den \TUDScript-Klassen jedoch auch die Möglichkeit
% besteht, verschiedene zusätzliche Parameter für diesen Befehl zu verwenden. 
% Um allerdings für den Anwender das gewohnte Vorgehen beibehalten zu können,
% wurde diese Sonderbehandlung implementiert. 
%    \end{macrocode}
% \end{macro}^^A \TUD@parameter@nokey
% \end{macro}^^A \TUD@parameter@set
% \begin{macro}{\TUD@parameter@handler@macro}
% \changes{v2.05}{2016/05/26}{robustere Verarbeitung von Default-Argumenten}^^A
% Durch \cs{TUD@parameter@handler@macro} kann definiert werden, wie mit einem
% zuvor nicht mit \cs{TUD@parameter@def} definiertem Parameter beziehungsweise
% gewöhnlichem optionalen Argument umzugehen ist. Dabei wird unterschieden, ob 
% es sich bei dem unbekannten Parameter um ein normales optionales Argument 
% oder um eine Angabe in Schlüssel-Wert-Syntax handelt. Dabei wurden einfache 
% optionale Argumente zuvor durch \cs{TUD@parameter@set} dem Schlüssel 
% \cs{TUD@parameter@nokey} als Wert zugewiesen, um Umlaute etc. ohne Bedenken
% verwenden zu können.
%
% Das erste obligatorische Argument von \cs{TUD@parameter@handler@macro} wird 
% für die Verarbeitung unbekannter Schlüssel-Wert-Paare genutzt, das zweite für 
% einfache optionale Argumente.
%    \begin{macrocode}
\newcommand*\TUD@parameter@handler@macro[3][\TUD@parameter@@family]{%
  \TUD@parameter@checkfamily{#1}{TUD@parameter@handler@macro}%
  \expandafter\kv@set@family@handler\expandafter{#1}{%
    \ifstr{\kv@key}{\TUD@parameter@nokey}{#3}{#2}%
  }%
}
%    \end{macrocode}
% \end{macro}^^A \TUD@parameter@handler@macro
% \begin{macro}{\TUD@parameter@handler@value}
% \changes{v2.05}{2016/05/26}{neu}^^A
% Mit diesem Makro wird einem optionalen Argument, welches ohne Schlüssel 
% angegeben wurde, ein expliziter Parameter zugewiesen, welcher damit gesetzt 
% wird. Unbekannte Schlüssel-Wert-Argumente werden durch \cs{kv@handled@false} 
% immer als Fehler zurückgemeldet.
%    \begin{macrocode}
\newcommand*\TUD@parameter@handler@value[2][\TUD@parameter@@family]{%
  \TUD@parameter@checkfamily{#1}{TUD@parameter@handler@value}%
  \protected@edef\@tempa{%
    \noexpand\TUD@parameter@set{#1}{#2=\noexpand\kv@value}%
  }%
  \def\@tempb{\TUD@parameter@handler@macro[#1]{\kv@handled@false}}%
  \expandafter\@tempb\expandafter{\@tempa}%
}
%    \end{macrocode}
% \end{macro}^^A \TUD@parameter@handler@value
% \begin{macro}{\TUD@parameter@handler@default}
% Hiermit kann sowohl die zu verwendende Sprache als auch die Anzahl der
% gewünschten Spalten für bestimmte Umgebungen ohne die explizite Angabe eines
% Schlüssels festgelegt werden. Momentan betrifft das die beiden Umgebungen
% \env{abstract} und \env{tudpage} sowie Befehle und Umgebungen, welche auf 
% letzterer basieren. Unbekannte Argumente in Schlüssel-Wert-Syntax werden
% nicht unterstützt.
%    \begin{macrocode}
\newcommand*\TUD@parameter@handler@default[2][\TUD@parameter@@family]{%
  \TUD@parameter@checkfamily{#1}{TUD@parameter@handler@default}%
  \ifxblank{#2}{%
    \def\@tempa{\let\tud@reserved\relax}%
  }{%
    \def\@tempa{\def\tud@reserved{#2=\kv@value}}%
  }%
  \appto\@tempa{%
    \ifstr{\kv@value}{twocolumn}{\def\kv@value{2}}{}%
    \ifxnumber{\kv@value}{\def\tud@reserved{columns=\kv@value}}{}%
    \iflanguageloaded{\kv@value}{\def\tud@reserved{language=\kv@value}}{}%
    \ifx\tud@reserved\relax%
      \PackageError{tudscrbase}{%
        Unknown default value `\kv@value'%
      }{%
        If `\kv@value' is a language, you haven't loaded it.\MessageBreak%
        Otherwise, there's no handler for the given value.\MessageBreak%
        You should specify a certian key (<key>=\kv@value).
      }%
    \fi%
  }%
  \protected@eappto\@tempa{%
    \noexpand\ifx\noexpand\tud@reserved\noexpand\relax\noexpand\else%
      \noexpand\TUD@parameter@set{#1}{\noexpand\tud@reserved}%
    \noexpand\fi%
  }%
  \def\@tempb{\TUD@parameter@handler@macro[#1]{\kv@handled@false}}%
  \expandafter\@tempb\expandafter{\@tempa}%
}
%    \end{macrocode}
% \end{macro}^^A \TUD@parameter@handler@default
% \begin{macro}{\TUD@parameter@error}
% Das Makro \cs{TUD@parameter@wrn}\marg{Parameter}\marg{Werteliste} gibt für
% den Fall einer ungültigen Wertzuweisung an einen bestimmten \meta{Parameter}
% eine Warnung mit einem entsprechenden Hinweis auf gültige Werte innerhalb von
% \meta{Werteliste} aus.
%    \begin{macrocode}
\newcommand*\TUD@parameter@error[2]{%
  \PackageError{tudscrbase}{Unsupported value for parameter `#1'}{%
    `#1' can only be used with values:\MessageBreak#2%
  }%
}
%    \end{macrocode}
% \end{macro}^^A \TUD@parameter@error
%
% \iffalse
%</package&base>
%<*package&base|class&doc>
% \fi
%
% \subsubsection{Ausführung von paketspezifischem Quellcode}
%
% Ab und an ist es notwendig, bestimmten Quelltext gezielt in Abhängigkeit vom
% Ladezustand eines Paketes auszuführen.
% \begin{macro}{\TUD@UnwindPackage}
% \changes{v2.05}{2015/10/28}{neu}^^A
% Dieser Befehl dient zur Ausführung von Quelltext, falls ein Paket bis zum 
% Ende der Dokumentpräambel nicht geladen wurde. Im ersten obligatorischen
% Argument wird das Paket angegeben, im zweiten der Quellcode.
%    \begin{macrocode}
\newcommand*\TUD@UnwindPackage[2]{\AtEndPreamble{\@ifpackageloaded{#1}{}{#2}}}
%<doc>\BeforePackage{tudscrbase}{\undef\TUD@UnwindPackage}
%    \end{macrocode}
% \end{macro}^^A \TUD@UnwindPackage
%
% \iffalse
%</package&base|class&doc>
%<*package&base>
% \fi
%
% \begin{macro}{\TUD@AfterPackage@set}
% \changes{v2.04}{2015/03/09}{neu}^^A
% \begin{macro}{\TUD@AfterPackage@do}
% \changes{v2.03}{2015/02/15}{neu}^^A
% Mit diesen beiden Befehlen wird die Ausführung von Quellcode erst nach dem 
% Laden des gewünschten Paketes oder~-- falls das Paket geladen wurde~--  
% direkt im Dokument ausgeführt. Im ersten Argument wird das Paket angegeben, 
% im zweiten der Quellcode.
%    \begin{macrocode}
\newcommand*\TUD@AfterPackage@set[1]{%
  \newbool{@tud@#1@loaded}%
  \AfterPackage!{#1}{\booltrue{@tud@#1@loaded}}%
}
\newcommand*\TUD@AfterPackage@do[2]{%
  \ifcsdef{if@tud@#1@loaded}{%
    \if@atdocument%
      \ifbool{@tud@#1@loaded}{#2}{}%
    \else%
      \AfterPackage!{#1}{#2}%
    \fi%
  }{%
    \PackageError{tudscrbase}{\string\TUD@AfterPackage@set{#1} missing}{%
      You have to set \string\TUD@AfterPackage@set{#1} before\MessageBreak%
      the usage of \string\TUD@AfterPackage@do{#1}{<code>} is\MessageBreak%
      possible.%
    }%
  }%
}
%    \end{macrocode}
% \end{macro}^^A \TUD@AfterPackage@do
% \end{macro}^^A \TUD@AfterPackage@set
%
% \iffalse
%</package&base>
% \fi
%
% \subsubsection{Bedingt verzögerte Ausführung von \KOMAScript-Optionen}
%
% \begin{macro}{\TUD@KOMAoptions}
% \changes{v2.05}{2015/07/17}{neu}^^A
% Dieses Makro wird verwendet, um innerhalb der \TUDScript-Klassen zu 
% unterschieden, wie eine \KOMAScript-Option auszuführen ist. Wurde bereits 
% das Paket \pkg{scrextend} oder eine \KOMAScript-Klasse geladen, erfolgt die 
% Ausführung des Arguments direkt über \cs{KOMAoptions}. Andernfalls wird das 
% angegebene Argument an die zuladende Klasse durchgereicht.
%    \begin{macrocode}
%<*package&base>
\newcommand*\TUD@KOMAoptions[1]{}
\ifdef{\KOMAClassName}{%
  \let\TUD@KOMAoptions\KOMAoptions
}{%
  \renewcommand*\TUD@KOMAoptions[1]{%
    \PackageWarning{tudscrbase}{%
      You should load package `scrextend' right after the\MessageBreak%
      documentclass. Option \string\TUD@KOMAoptions{`#1'} is gobbled%
    }%
  }%
  \AfterPackage*{scrextend}{\let\TUD@KOMAoptions\KOMAoptions}
}
%</package&base>
%    \end{macrocode}
% Nach dem Laden einer \TUDScript-Klasse wird der Befehl so angepasst, dass 
% dieser vor dem Laden der dazugehörigen \KOMAScript-Elternklasse die Optionen 
% einfach durchreicht. Nach dem Laden der Klasse steht dann \cs{KOMAoptions} 
% zur Verfügung.
%    \begin{macrocode}
%<*load&class>
%<*!inherit>
\renewcommand*\TUD@KOMAoptions[1]{\PassOptionsToClass{#1}{\TUD@Class@KOMA}}
\AfterClass{\TUD@Class@KOMA}{\let\TUD@KOMAoptions\KOMAoptions}
%</!inherit>
%<*inherit>
\renewcommand*\TUD@KOMAoptions[1]{\PassOptionsToClass{#1}{\TUD@Class@Parent}}
\AfterClass{\TUD@Class@Parent}{\let\TUD@KOMAoptions\KOMAoptions}
%</inherit>
%</load&class>
%    \end{macrocode}
% \end{macro}^^A \TUD@KOMAoptions
%
% \iffalse
%<*class&body>
% \fi
%
% \section{Externe Pakete für die \TUDScript-Klassen}
%
% \changes{v2.01}{2014/04/24}{Versionsanforderungen bei benötigten Paketen}^^A
% \changes{v2.02}{2014/07/08}{Warnung bei Verwendung von \pkg{graphics}}^^A
%
% Für die Verwendung der hier erstellten \KOMAScript-Wrapper-Klassen werden
% einige wenige Pakete eingebunden. Dabei wurde versucht, die Anzahl der
% Pakete möglichst gering zu halten und nur die wirklich notwendigen zu
% verwenden.
%
% \subsection{Erweiterte Definition von Umgebungen mit dem Paket \pkg{environ}}
%
% Die \env{abstract}-Umgebung wird im Vergleich zu den \KOMAScript-Klassen
% stark erweitert. Für diese sowie für die Umgebungen \env{declarations} und 
% \env{tudpage} wird das Paket \pkg{environ} für die Umgebungsdefinition
% benötigt.
%    \begin{macrocode}
\RequirePackage{environ}[2013/04/01]
%    \end{macrocode}
%
% Innerhalb dieser Umgebungen soll es außerdem möglich sein, ein mehrspaltiges 
% Layout~-- auch konträr zu den globalen Dokumenteinstellungen~-- zu verwenden.
% Mit diesen Befehlen lässt sich die Anzahl der Spalten über einen Parameter
% anpassen, falls das Paket \pkg{multicol} geladen wurde.
% \begin{macro}{\tud@x@multicol@num}
% \begin{macro}{\tud@x@multicol@check}
% Im Makro \cs{tud@x@multicol@num} wird die Anzahl der gewünschten Spalten in 
% einer Umgebung für die Verwendung des \pkg{multicol}-Paketes gespeichert.
%    \begin{macrocode}
\cs@lock{tud@x@multicol@num}{1}
%    \end{macrocode}
% Der Befehl \cs{tud@x@multicol@check} prüft, ob das Paket \pkg{multicol} 
% geladen wurde. Falls dies nicht der Fall ist, wird eine Warnung ausgegeben 
% und die Änderung des Wertes über einen Parameter der Umgebungen \env{tudpage} 
% respektive \env{abstract} sowie \env{declarations} über \cs{set@set@lock} 
% verhindert.
%    \begin{macrocode}
\newcommand*\tud@x@multicol@check{%
  \ifnum\tud@x@multicol@num>\@ne\relax%
    \ClassWarning{\TUD@Class@Name}{%
      The option `columns=\tud@x@multicol@num' is only\MessageBreak%
      supported, when package `multicol' is loaded%
    }%
    \cs@set@lock{tud@x@multicol@num}{1}%
  \fi%
}
\AfterPackage{multicol}{\renewcommand*\tud@x@multicol@check{\relax}}
%    \end{macrocode}
% \end{macro}^^A \tud@x@multicol@check
% \end{macro}^^A \tud@x@multicol@num
%
% \subsection{Pakete für Grafiken und Farben}
%
% Es folgen die Pakete, welche bei Bedarf am Ende der Präambel geladen werden.
%    \begin{macrocode}
\AtEndPreamble{%
%    \end{macrocode}
% Mit \pkg{graphicx} werden die Logos der TU~Dresden sowie von Dresden Concept
% mit dem Befehl \cs{includegraphics} u.\,a. auf der Titelseite eingebunden.
% Sollte lediglich das \pkg{graphics}-Paket geladen worden sein, so wird der
% Nutzer mit einer Warnung informiert, dass zusätzlich das \pkg{graphicx}-Paket 
% geladen wird.
%    \begin{macrocode}
  \@ifpackageloaded{graphicx}{}{%
    \@ifpackageloaded{graphics}{%
      \ClassWarningNoLine{\TUD@Class@Name}{%
        Package `graphics' was superseded by `graphicx',\MessageBreak%
        which now will be loaded automatically%
      }%
    }{}%
    \RequirePackage{graphicx}[1999/02/16]%
  }%
%    \end{macrocode}
% Mit dem Paket \pkg{tudscrcolor} werden die Befehle für die Auswahl der Farben
% des \CDs definiert, welches wiederum \pkg{xcolor} lädt.
%    \begin{macrocode}
  \RequirePackage{tudscrcolor}[\TUD@Version]%
}
%    \end{macrocode}
%
% \iffalse
%</class&body>
% \fi
%
% \Finale
%
\endinput

%
% \begin{macro}{\TUD@noworlater}
% \changes{v2.05}{2015/07/03}{neu implementiert}^^A
% \begin{macro}{\TUD@noworlater@simple}
% \changes{v2.05}{2015/07/03}{neu}^^A
% Hiermit kann die Abarbeitung der Optionen an das Ende der verwendeten 
% Klasse bzw. des Paketes verzögert werden. Aufgrund der Besonderheiten der
% Befehle \cs{AtEndOfClass} und \cs{AtEndOfPackage} können diese nicht
% innerhalb von \pkg{tudscrbase} sondern erst außerhalb nach dem Laden
% definiert werden. Damit keine Probleme dabei auftreten, falls das Paket
% geladen wird ohne daran anschließend die notwendigen Redefinitionen
% durchzuführen, werden die beiden Varianten des Befehls \cs{TUD@noworlater} 
% im Paket definiert. 
%
% Im ersten Argument von \cs{TUD@noworlater} wird einer der wertzuweisenden
% Befehle für Optionen (\cs{TUD@set@\dots}) erwartet. Dieser wird immer
% ausgeführt, um ungültige Wertzuweisungen einer Option, welche als globale
% Klassenoption angegeben wurde, über die \LaTeX-Standardroutine als Warnung
% auszugeben. Bei der eigentlichen~-- sprich verzögerten~-- Ausführung der
% Option wird die Wertzuweisung abermals ausgeführt, gefolgt von der im 
% zweiten Argument definierten Abarbeitung dieser.
%    \begin{macrocode}
%<*package&base>
\newcommand*\TUD@noworlater[2]{}
\newcommand*\TUD@noworlater@simple[2]{%
  \PackageWarning{tudscrbase}{%
    The content of \string\TUD@noworlater will be executed immediately%
  }%
  #1#2%
}
\let\TUD@noworlater\TUD@noworlater@simple
%</package&base>
%    \end{macrocode}
% Nach dem Laden des Paketes wird geprüft, ob die ursprüngliche Definition 
% des Befehls aus dem Paket noch besteht. Ist dies der Fall, wird der Befehl
% zur Verzögerung an das Ende der Klasse bzw. des Paketes umdefiniert.
%    \begin{macrocode}
%<*load>
\ifx\TUD@noworlater\TUD@noworlater@simple
%<*class>
  \renewcommand*\TUD@noworlater[2]{#1\AtEndOfClass{#1#2}}%
  \AtEndOfClass{\renewcommand*\TUD@noworlater[2]{#1#2}}%
%</class>
%<*package>
  \renewcommand*\TUD@noworlater[2]{#1\AtEndOfPackage{#1#2}}%
  \AtEndOfPackage{\renewcommand*\TUD@noworlater[2]{#1#2}}%
%</package>
\fi
%</load>
%    \end{macrocode}
% \end{macro}^^A \TUD@noworlater@simple
% \end{macro}^^A \TUD@noworlater
%
